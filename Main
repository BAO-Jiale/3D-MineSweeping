import com.jme3.app.SimpleApplication;
import com.jme3.input.InputManager;
import com.jme3.input.KeyInput;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.MouseButtonTrigger;
import com.jme3.input.lwjgl.LwjglKeyInput;
import com.jme3.input.lwjgl.LwjglMouseInput;
import com.jme3.material.Material;
import com.jme3.renderer.RenderManager;
import com.jme3.scene.Geometry;
import com.jme3.scene.Node;
import com.jme3.scene.Spatial;
import com.jme3.system.AppSettings;
import com.jme3.system.lwjgl.LwjglAbstractDisplay;
import org.lwjgl.LWJGLException;


public class Main extends SimpleApplication{
    public GameController gameController=new GameController(new Player(),new Player());
    public MineGenerator mineField=new MineGenerator("Junior");
    Spatial [][]temp=new Spatial[mineField.getRow()][mineField.getCol()];
    Status [][]status=mineField.getMineField();
    boolean isPaused=false;


    public static void main(String[] args){
        Main app = new Main();
        app.start();
    }

    Node shootables;
    Geometry mark;

    @Override
    public void simpleInitApp() {
        /* Initialize the game scene here */
        
        //load grass
        Spatial grass = assetManager.loadModel("Assets/Models/Grass/Grass.obj");
        Material materialGrass = assetManager.loadMaterial("Assets/Models/Grass/Grass.mtl");
        grass.setMaterial(materialGrass);
        
        for (int i=0;i< mineField.getRow();i++){
            for (int j=0;j< mineField.getCol();j++){
                temp[i][j]=grass;
                temp[i][j].scale(0.2f);
                temp[i][j].center();
                float m=(float)(i-(0.2* mineField.getRow())+0.1);
                float n=(float)(j-(0.2* mineField.getCol())+0.1);
                temp[i][j].setLocalTranslation(m,n,0.0f);

                rootNode.attachChild(temp[i][j]);
              }
        }
        this.initKeys();//绑定事件
        EventListener listener=new EventListener();
        inputManager.addListener(listener);
    }

    LwjglAbstractDisplay e=new LwjglAbstractDisplay() {
        @Override
        public Type getType() {
            return null;
        }

        @Override
        public void setTitle(String s) {

        }

        @Override
        public void restart() {

        }

        @Override
        protected void createContext(AppSettings appSettings) throws LWJGLException {

        }

        @Override
        protected void destroyContext() {

        }

        @Override
        public void create(boolean b) {

        }
    };
    InputManager inputManager=new InputManager(new LwjglMouseInput(e),new LwjglKeyInput(e),null,null);
    public void initKeys(){
        // 你可以给一个或多个事件指定同样的事件名称
        inputManager.addMapping("Pause", new KeyTrigger(KeyInput.KEY_P));
        inputManager.addMapping("Cheat", new KeyTrigger(KeyInput.KEY_T));
        inputManager.addMapping("Open", new MouseButtonTrigger(MouseInput.BUTTON_LEFT));
        inputManager.addMapping("Mark", new MouseButtonTrigger(MouseInput.BUTTON_RIGHT));
    }


    class EventListener implements ActionListener {
        //通过射线检测判断操作的是哪个格子
        public int[] getGrid(){return null;}
        //进行操作
        @Override
        public void onAction(String name, boolean isPressed, float tpf) {
            Spatial mine = assetManager.loadModel("Assets/Models/Mine/Mine.obj");
            Material materialMine = assetManager.loadMaterial("Assets/Models/Mine/Mine.mtl");
            mine.setMaterial(materialMine);
            mine.scale(0.2f);

            if ("Pause".equals(name)&&isPressed){

                if (isPaused){

                    isPaused=false;}
                if (!isPaused){

                    isPaused=true;}
            }
            if ("Cheat".equals(name)&&isPressed){
                for (int i=0;i< mineField.getRow();i++){
                    for (int j=0;j< mineField.getCol();j++){
                        if (mineField.getMine()[i][j]==9){
                            temp[i][j]=mine;
                        }
                        status[i][j]=Status.Clear;
                    }
                }
            }
            if ("Open".equals(name)&&isPressed){
                if (status[getGrid()[0]][getGrid()[1]].equals(Status.Clear)|status[getGrid()[0]][getGrid()[1]].equals(Status.Mine)|status[getGrid()[0]][getGrid()[1]].equals(Status.Flag)){}
                //有雷
                else if (status[getGrid()[0]][getGrid()[1]].equals(Status.Covered_with_Mine)){
                    temp[getGrid()[0]][getGrid()[1]]=mine;
                    status[getGrid()[0]][getGrid()[1]]=Status.Mine;
                }else {
                    int mineNearby=mineField.getMine()[getGrid()[0]][getGrid()[1]];
                    //改变显示

                    status[getGrid()[0]][getGrid()[1]]=Status.Clear;
                }
                gameController.nextTurn();
            }
            if ("Mark".equals(name)&&isPressed){
                status[getGrid()[0]][getGrid()[1]]=Status.Clear;
            }

            rootNode.detachAllChildren();
            for (int i=0;i< mineField.getRow();i++){
                for (int j=0;j< mineField.getCol();j++){
                    rootNode.attachChild(temp[i][j]);
                }
            }

    }

    }



    @Override
    public void simpleUpdate(float tpf) {
        /* Interact with game events in the main loop */
    }

    @Override
    public void simpleRender(RenderManager rm) {
        /* (optional) Make advanced modifications to frameBuffer and scene graph. */
    }
}

